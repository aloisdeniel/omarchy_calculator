import 'package:decimal/decimal.dart';
import 'package:omarchy_calculator/src/engine/base.dart';
import 'package:omarchy_calculator/src/engine/parse.dart';
import 'package:omarchy_calculator/src/engine/tokenize.dart';

final parseDataSet = [
  (
    'Basic numbers',
    <(List<Token>, Expression)>[
      ([], EmptyExpression()),
      ([NumberToken('123')], NumberExpression(Decimal.fromInt(123))),
      ([NumberToken('123.456')], NumberExpression(Decimal.parse('123.456'))),
    ],
  ),
  (
    'Binary operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('5'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.fromInt(5)),
          NumberExpression(Decimal.fromInt(3)),
        ),
      ),
      (
        <Token>[
          NumberToken('10'),
          OperatorToken(OperatorTokenType.minus),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('4'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          NumberExpression(Decimal.fromInt(10)),
          NumberExpression(Decimal.fromInt(4)),
        ),
      ),
      (
        <Token>[
          NumberToken('10'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('4'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          NumberExpression(Decimal.fromInt(10)),
          NumberExpression(Decimal.fromInt(4)),
        ),
      ),
      (
        <Token>[
          NumberToken('6'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('7'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(6)),
          NumberExpression(Decimal.fromInt(7)),
        ),
      ),
      (
        <Token>[
          NumberToken('20'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('5'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          NumberExpression(Decimal.fromInt(20)),
          NumberExpression(Decimal.fromInt(5)),
        ),
      ),
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.power,
          NumberExpression(Decimal.fromInt(2)),
          NumberExpression(Decimal.fromInt(3)),
        ),
      ),
    ],
  ),
  (
    'Operator precedence',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.fromInt(2)),
          BinaryExpression(
            BinaryOperator.multiply,
            NumberExpression(Decimal.fromInt(3)),
            NumberExpression(Decimal.fromInt(4)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('10'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('6'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          NumberExpression(Decimal.fromInt(10)),
          BinaryExpression(
            BinaryOperator.divide,
            NumberExpression(Decimal.fromInt(6)),
            NumberExpression(Decimal.fromInt(2)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(2)),
          BinaryExpression(
            BinaryOperator.power,
            NumberExpression(Decimal.fromInt(3)),
            NumberExpression(Decimal.fromInt(2)),
          ),
        ),
      ),
    ],
  ),
  (
    'Complex expressions',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('5'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          BinaryExpression(
            BinaryOperator.add,
            NumberExpression(Decimal.fromInt(2)),
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.fromInt(3)),
              NumberExpression(Decimal.fromInt(4)),
            ),
          ),
          NumberExpression(Decimal.fromInt(5)),
        ),
      ),
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          ParenthesisToken.open(),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('4'),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(2)),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              NumberExpression(Decimal.fromInt(3)),
              NumberExpression(Decimal.fromInt(4)),
            ),
            true,
          ),
        ),
      ),
    ],
  ),
  (
    'Constants',
    <(List<Token>, Expression)>[
      (<Token>[ConstantToken(Constant.pi)], ConstantExpression(Constant.pi)),
      (
        <Token>[ConstantToken(Constant.euler)],
        ConstantExpression(Constant.euler),
      ),
    ],
  ),
  (
    'More basic arithmetic operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('0'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('0'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.fromInt(0)),
          NumberExpression(Decimal.fromInt(0)),
        ),
      ),
      (
        <Token>[
          NumberToken('999999'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('1'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.fromInt(999999)),
          NumberExpression(Decimal.fromInt(1)),
        ),
      ),
      (
        <Token>[
          NumberToken('10.5'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('3.2'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          NumberExpression(Decimal.parse('10.5')),
          NumberExpression(Decimal.parse('3.2')),
        ),
      ),
      (
        <Token>[
          NumberToken('100'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('0'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(100)),
          NumberExpression(Decimal.fromInt(0)),
        ),
      ),
      (
        <Token>[
          NumberToken('22.5'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('4.5'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          NumberExpression(Decimal.parse('22.5')),
          NumberExpression(Decimal.parse('4.5')),
        ),
      ),
      (
        <Token>[
          OperatorToken.minus(),
          NumberToken('5'),
          OperatorToken.multiply(),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          UnaryExpression.negate(NumberExpression(Decimal.parse('5'))),
          NumberExpression(Decimal.fromInt(3)),
        ),
      ),
      (
        <Token>[
          OperatorToken.minus(),
          NumberToken('8'),
          OperatorToken(OperatorTokenType.multiply),
          OperatorToken.minus(),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          UnaryExpression.negate(NumberExpression(Decimal.parse('8'))),
          UnaryExpression.negate(NumberExpression(Decimal.parse('2'))),
        ),
      ),
    ],
  ),
  (
    'Consecutive operators',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('3'),
          OperatorToken(OperatorTokenType.plus),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(3)),
          NumberExpression(Decimal.fromInt(4)),
        ),
      ),
      (
        <Token>[
          NumberToken('3'),
          OperatorToken(OperatorTokenType.plus),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('4'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.fromInt(3)),
          UnaryExpression(
            UnaryOperator.negate,
            NumberExpression(Decimal.fromInt(4)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('3'),
          OperatorToken(OperatorTokenType.minus),
          OperatorToken(OperatorTokenType.plus),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(3)),
          NumberExpression(Decimal.fromInt(4)),
        ),
      ),
      (
        <Token>[
          NumberToken('3'),
          OperatorToken(OperatorTokenType.plus),
          OperatorToken(OperatorTokenType.multiply),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('4'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(3)),
          UnaryExpression(
            UnaryOperator.negate,
            NumberExpression(Decimal.fromInt(4)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('3'),
          OperatorToken(OperatorTokenType.plus),
          OperatorToken(OperatorTokenType.multiply),
          OperatorToken(OperatorTokenType.minus),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(3)),
          NumberExpression(Decimal.fromInt(4)),
        ),
      ),
    ],
  ),
  (
    'Extended operator precedence',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('3'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('5'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          BinaryExpression(
            BinaryOperator.multiply,
            NumberExpression(Decimal.fromInt(3)),
            NumberExpression(Decimal.fromInt(4)),
          ),
          NumberExpression(Decimal.fromInt(5)),
        ),
      ),
      (
        <Token>[
          NumberToken('20'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('12'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          NumberExpression(Decimal.fromInt(20)),
          BinaryExpression(
            BinaryOperator.divide,
            NumberExpression(Decimal.fromInt(12)),
            NumberExpression(Decimal.fromInt(3)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.fromInt(2)),
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.power,
              NumberExpression(Decimal.fromInt(3)),
              NumberExpression(Decimal.fromInt(2)),
            ),
            NumberExpression(Decimal.fromInt(4)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.power,
          NumberExpression(Decimal.fromInt(2)),
          BinaryExpression(
            BinaryOperator.power,
            NumberExpression(Decimal.fromInt(3)),
            NumberExpression(Decimal.fromInt(2)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          BinaryExpression(
            BinaryOperator.add,
            NumberExpression(Decimal.fromInt(1)),
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.fromInt(2)),
              BinaryExpression(
                BinaryOperator.power,
                NumberExpression(Decimal.fromInt(3)),
                NumberExpression(Decimal.fromInt(2)),
              ),
            ),
          ),
          BinaryExpression(
            BinaryOperator.divide,
            NumberExpression(Decimal.fromInt(4)),
            NumberExpression(Decimal.fromInt(2)),
          ),
        ),
      ),
    ],
  ),
  (
    'Extended parentheses and nested expressions',
    <(List<Token>, Expression)>[
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              NumberExpression(Decimal.fromInt(2)),
              NumberExpression(Decimal.fromInt(3)),
            ),
            true,
          ),
          NumberExpression(Decimal.fromInt(4)),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          ParenthesisToken.open(),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('1'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.multiply,
              ParenthesisGroupExpression(
                BinaryExpression(
                  BinaryOperator.add,
                  NumberExpression(Decimal.fromInt(2)),
                  NumberExpression(Decimal.fromInt(3)),
                ),
                true,
              ),
              NumberExpression(Decimal.fromInt(4)),
            ),
            true,
          ),
          NumberExpression(Decimal.fromInt(1)),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('2'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.multiply),
          ParenthesisToken.open(),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('1'),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.subtract,
              NumberExpression(Decimal.fromInt(5)),
              NumberExpression(Decimal.fromInt(2)),
            ),
            true,
          ),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              NumberExpression(Decimal.fromInt(3)),
              NumberExpression(Decimal.fromInt(1)),
            ),
            true,
          ),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.power),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.power,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              NumberExpression(Decimal.fromInt(2)),
              NumberExpression(Decimal.fromInt(3)),
            ),
            true,
          ),
          NumberExpression(Decimal.fromInt(2)),
        ),
      ),
    ],
  ),
  (
    'Decimal precision and edge cases',
    <(List<Token>, Expression)>[
      (
        <Token>[NumberToken('0.00001')],
        NumberExpression(Decimal.parse('0.00001')),
      ),
      (
        <Token>[NumberToken('3.141592653589793')],
        NumberExpression(Decimal.parse('3.141592653589793')),
      ),
      (
        <Token>[
          NumberToken('0.1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('0.2'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.parse('0.1')),
          NumberExpression(Decimal.parse('0.2')),
        ),
      ),
      (
        <Token>[OperatorToken.minus(), NumberToken('123.456')],
        UnaryExpression(
          UnaryOperator.negate,
          NumberExpression(Decimal.parse('123.456')),
        ),
      ),
      (
        <Token>[
          NumberToken('0.0'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('0'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.parse('0.0')),
          NumberExpression(Decimal.fromInt(0)),
        ),
      ),
    ],
  ),
  (
    'Constants with operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          ConstantToken(Constant.pi),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(2)),
          ConstantExpression(Constant.pi),
        ),
      ),
      (
        <Token>[
          ConstantToken(Constant.euler),
          OperatorToken(OperatorTokenType.power),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.power,
          ConstantExpression(Constant.euler),
          NumberExpression(Decimal.fromInt(2)),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          ConstantToken(Constant.pi),
          OperatorToken(OperatorTokenType.plus),
          ConstantToken(Constant.euler),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              ConstantExpression(Constant.pi),
              ConstantExpression(Constant.euler),
            ),
            true,
          ),
          NumberExpression(Decimal.fromInt(2)),
        ),
      ),
    ],
  ),
  (
    'Function expressions',
    <(List<Token>, Expression)>[
      (
        <Token>[NumberToken('16'), FunctionToken(MathFunction.squareRoot)],
        FunctionExpression(
          MathFunction.squareRoot,
          NumberExpression(Decimal.fromInt(16)),
        ),
      ),
      (
        <Token>[NumberToken('30'), FunctionToken(MathFunction.sin)],
        FunctionExpression(
          MathFunction.sin,
          NumberExpression(Decimal.fromInt(30)),
        ),
      ),
      (
        <Token>[NumberToken('60'), FunctionToken(MathFunction.cos)],
        FunctionExpression(
          MathFunction.cos,
          NumberExpression(Decimal.fromInt(60)),
        ),
      ),
      (
        <Token>[NumberToken('45'), FunctionToken(MathFunction.tan)],
        FunctionExpression(
          MathFunction.tan,
          NumberExpression(Decimal.fromInt(45)),
        ),
      ),
      (
        <Token>[NumberToken('5'), FunctionToken(MathFunction.square)],
        FunctionExpression(
          MathFunction.square,
          NumberExpression(Decimal.fromInt(5)),
        ),
      ),
      (
        <Token>[NumberToken('25.0'), FunctionToken(MathFunction.squareRoot)],
        FunctionExpression(
          MathFunction.squareRoot,
          NumberExpression(Decimal.parse('25.0')),
        ),
      ),
      (
        <Token>[NumberToken('50'), FunctionToken(MathFunction.percent)],
        FunctionExpression(
          MathFunction.percent,
          NumberExpression(Decimal.fromInt(50)),
        ),
      ),
      (
        <Token>[NumberToken('0'), FunctionToken(MathFunction.sin)],
        FunctionExpression(
          MathFunction.sin,
          NumberExpression(Decimal.fromInt(0)),
        ),
      ),
      (
        <Token>[NumberToken('90'), FunctionToken(MathFunction.cos)],
        FunctionExpression(
          MathFunction.cos,
          NumberExpression(Decimal.fromInt(90)),
        ),
      ),
      (
        <Token>[NumberToken('45'), FunctionToken(MathFunction.tan)],
        FunctionExpression(
          MathFunction.tan,
          NumberExpression(Decimal.fromInt(45)),
        ),
      ),
      (
        <Token>[
          OperatorToken.minus(),
          NumberToken('3'),
          FunctionToken.square(),
        ],
        UnaryExpression.negate(
          FunctionExpression(
            MathFunction.square,
            NumberExpression(Decimal.parse('3')),
          ),
        ),
      ),
      (
        <Token>[NumberToken('10000'), FunctionToken(MathFunction.squareRoot)],
        FunctionExpression(
          MathFunction.squareRoot,
          NumberExpression(Decimal.fromInt(10000)),
        ),
      ),
      (
        <Token>[ConstantToken(Constant.pi), FunctionToken(MathFunction.sin)],
        FunctionExpression(MathFunction.sin, ConstantExpression(Constant.pi)),
      ),
      (
        <Token>[
          NumberToken('25'),
          FunctionToken(MathFunction.squareRoot),
          FunctionToken(MathFunction.square),
        ],
        FunctionExpression(
          MathFunction.square,
          FunctionExpression(
            MathFunction.squareRoot,
            NumberExpression(Decimal.fromInt(25)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('30'),
          FunctionToken(MathFunction.sin),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('60'),
          FunctionToken(MathFunction.cos),
        ],
        BinaryExpression(
          BinaryOperator.add,
          FunctionExpression(
            MathFunction.sin,
            NumberExpression(Decimal.fromInt(30)),
          ),
          FunctionExpression(
            MathFunction.cos,
            NumberExpression(Decimal.fromInt(60)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('5'),
          FunctionToken(MathFunction.square),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(2)),
          FunctionExpression(
            MathFunction.square,
            NumberExpression(Decimal.fromInt(5)),
          ),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('30'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('15'),
          ParenthesisToken.close(),
          FunctionToken(MathFunction.sin),
        ],
        FunctionExpression(
          MathFunction.sin,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              NumberExpression(Decimal.fromInt(30)),
              NumberExpression(Decimal.fromInt(15)),
            ),
            true,
          ),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('60'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('2'),
          ParenthesisToken.close(),
          FunctionToken(MathFunction.cos),
        ],
        FunctionExpression(
          MathFunction.cos,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.divide,
              NumberExpression(Decimal.fromInt(60)),
              NumberExpression(Decimal.fromInt(2)),
            ),
            true,
          ),
        ),
      ),
    ],
  ),
  (
    'Equals token handling',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('5'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          EqualsToken(),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.fromInt(5)),
          NumberExpression(Decimal.fromInt(3)),
        ),
      ),
    ],
  ),
  (
    'Unary expressions and negative numbers',
    <(List<Token>, Expression)>[
      (
        <Token>[
          OperatorToken(OperatorTokenType.minus),
          ParenthesisToken.open(),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          ParenthesisToken.close(),
        ],
        UnaryExpression(
          UnaryOperator.negate,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              NumberExpression(Decimal.fromInt(5)),
              NumberExpression(Decimal.fromInt(3)),
            ),
            true,
          ),
        ),
      ),
      (
        <Token>[
          OperatorToken(OperatorTokenType.minus),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('7'),
        ],
        UnaryExpression(
          UnaryOperator.negate,
          NumberExpression(Decimal.fromInt(7)),
        ),
      ),
      (
        <Token>[
          OperatorToken(OperatorTokenType.minus),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          UnaryExpression(
            UnaryOperator.negate,
            NumberExpression(Decimal.fromInt(4)),
          ),
          NumberExpression(Decimal.fromInt(3)),
        ),
      ),
      (
        <Token>[
          OperatorToken(OperatorTokenType.minus),
          NumberToken('9'),
          FunctionToken(MathFunction.squareRoot),
        ],
        UnaryExpression(
          UnaryOperator.negate,
          FunctionExpression(
            MathFunction.squareRoot,
            NumberExpression(Decimal.parse('9')),
          ),
        ),
      ),
    ],
  ),
  (
    'Complex real-world calculator scenarios',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('200'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('15'),
          FunctionToken(MathFunction.percent),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(200)),
          FunctionExpression(
            MathFunction.percent,
            NumberExpression(Decimal.fromInt(15)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('1000'),
          OperatorToken(OperatorTokenType.multiply),
          ParenthesisToken.open(),
          NumberToken('1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('0.05'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.power),
          NumberToken('10'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(1000)),
          BinaryExpression(
            BinaryOperator.power,
            ParenthesisGroupExpression(
              BinaryExpression(
                BinaryOperator.add,
                NumberExpression(Decimal.fromInt(1)),
                NumberExpression(Decimal.parse('0.05')),
              ),
              true,
            ),
            NumberExpression(Decimal.fromInt(10)),
          ),
        ),
      ),
      (
        <Token>[
          ConstantToken(Constant.pi),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('5'),
          FunctionToken(MathFunction.square),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          ConstantExpression(Constant.pi),
          FunctionExpression(
            MathFunction.square,
            NumberExpression(Decimal.fromInt(5)),
          ),
        ),
      ),
      (
        <Token>[
          OperatorToken(OperatorTokenType.minus),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            UnaryExpression(
              UnaryOperator.negate,
              NumberExpression(Decimal.fromInt(4)),
            ),
            NumberExpression(Decimal.fromInt(2)),
          ),
          NumberExpression(Decimal.fromInt(3)),
        ),
      ),
      (
        <Token>[
          NumberToken('0.5'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('10'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('5'),
          FunctionToken(MathFunction.square),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            NumberExpression(Decimal.parse('0.5')),
            NumberExpression(Decimal.fromInt(10)),
          ),
          FunctionExpression(
            MathFunction.square,
            NumberExpression(Decimal.fromInt(5)),
          ),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('32'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('32'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('9'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          BinaryExpression(
            BinaryOperator.multiply,
            ParenthesisGroupExpression(
              BinaryExpression(
                BinaryOperator.subtract,
                NumberExpression(Decimal.fromInt(32)),
                NumberExpression(Decimal.fromInt(32)),
              ),
              true,
            ),
            NumberExpression(Decimal.fromInt(5)),
          ),
          NumberExpression(Decimal.fromInt(9)),
        ),
      ),
      (
        <Token>[
          NumberToken('10'),
          OperatorToken(OperatorTokenType.power),
          ParenthesisToken.open(),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('0.5'),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.power,
          NumberExpression(Decimal.fromInt(10)),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              NumberExpression(Decimal.fromInt(2)),
              BinaryExpression(
                BinaryOperator.multiply,
                NumberExpression(Decimal.fromInt(3)),
                NumberExpression(Decimal.parse('0.5')),
              ),
            ),
            true,
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('30'),
          FunctionToken(MathFunction.sin),
          FunctionToken(MathFunction.square),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('30'),
          FunctionToken(MathFunction.cos),
          FunctionToken(MathFunction.square),
        ],
        BinaryExpression(
          BinaryOperator.add,
          FunctionExpression(
            MathFunction.square,
            FunctionExpression(
              MathFunction.sin,
              NumberExpression(Decimal.fromInt(30)),
            ),
          ),
          FunctionExpression(
            MathFunction.square,
            FunctionExpression(
              MathFunction.cos,
              NumberExpression(Decimal.fromInt(30)),
            ),
          ),
        ),
      ),
    ],
  ),
  (
    'Edge cases and special scenarios',
    <(List<Token>, Expression)>[
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('42'),
          ParenthesisToken.close(),
        ],
        ParenthesisGroupExpression(NumberExpression(Decimal.fromInt(42)), true),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          ParenthesisToken.open(),
          ConstantToken(Constant.pi),
          ParenthesisToken.close(),
          ParenthesisToken.close(),
        ],
        ParenthesisGroupExpression(
          ParenthesisGroupExpression(ConstantExpression(Constant.pi), true),
          true,
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          ConstantToken(Constant.euler),
          ParenthesisToken.close(),
          FunctionToken(MathFunction.square),
        ],
        FunctionExpression(
          MathFunction.square,
          ParenthesisGroupExpression(ConstantExpression(Constant.euler), true),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          ConstantToken(Constant.pi),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          FunctionToken(MathFunction.square),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.power),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('10'),
          FunctionToken(MathFunction.squareRoot),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          BinaryExpression(
            BinaryOperator.power,
            ParenthesisGroupExpression(
              BinaryExpression(
                BinaryOperator.add,
                BinaryExpression(
                  BinaryOperator.multiply,
                  NumberExpression(Decimal.fromInt(2)),
                  ConstantExpression(Constant.pi),
                ),
                FunctionExpression(
                  MathFunction.square,
                  NumberExpression(Decimal.fromInt(3)),
                ),
              ),
              true,
            ),
            NumberExpression(Decimal.fromInt(2)),
          ),
          FunctionExpression(
            MathFunction.squareRoot,
            NumberExpression(Decimal.fromInt(10)),
          ),
        ),
      ),
    ],
  ),
  (
    'Financial calculator operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('1000'),
          OperatorToken(OperatorTokenType.plus),
          ParenthesisToken.open(),
          NumberToken('1000'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('12'),
          FunctionToken(MathFunction.percent),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.fromInt(1000)),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.fromInt(1000)),
              FunctionExpression(
                MathFunction.percent,
                NumberExpression(Decimal.fromInt(12)),
              ),
            ),
            true,
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('5000'),
          OperatorToken(OperatorTokenType.minus),
          ParenthesisToken.open(),
          NumberToken('5000'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('25'),
          FunctionToken(MathFunction.percent),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          NumberExpression(Decimal.fromInt(5000)),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.fromInt(5000)),
              FunctionExpression(
                MathFunction.percent,
                NumberExpression(Decimal.fromInt(25)),
              ),
            ),
            true,
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('1500'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('12'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('24'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.divide,
            NumberExpression(Decimal.fromInt(1500)),
            NumberExpression(Decimal.fromInt(12)),
          ),
          NumberExpression(Decimal.fromInt(24)),
        ),
      ),
    ],
  ),
  (
    'Scientific calculator operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          ConstantToken(Constant.euler),
          OperatorToken(OperatorTokenType.power),
          ParenthesisToken.open(),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('0.5'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('2'),
          FunctionToken(MathFunction.square),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.power,
          ConstantExpression(Constant.euler),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.multiply,
              UnaryExpression(
                UnaryOperator.negate,
                NumberExpression(Decimal.parse('0.5')),
              ),
              FunctionExpression(
                MathFunction.square,
                NumberExpression(Decimal.fromInt(2)),
              ),
            ),
            true,
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          ConstantToken(Constant.pi),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('6.37'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('10'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('6'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.fromInt(2)),
              ConstantExpression(Constant.pi),
            ),
            NumberExpression(Decimal.parse('6.37')),
          ),
          BinaryExpression(
            BinaryOperator.power,
            NumberExpression(Decimal.fromInt(10)),
            NumberExpression(Decimal.fromInt(6)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('9.81'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('100'),
          FunctionToken(MathFunction.square),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          BinaryExpression(
            BinaryOperator.multiply,
            NumberExpression(Decimal.parse('9.81')),
            FunctionExpression(
              MathFunction.square,
              NumberExpression(Decimal.fromInt(100)),
            ),
          ),
          NumberExpression(Decimal.fromInt(2)),
        ),
      ),
      (
        <Token>[
          NumberToken('60'),
          FunctionToken(MathFunction.sin),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('45'),
          FunctionToken(MathFunction.cos),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            FunctionExpression(
              MathFunction.sin,
              NumberExpression(Decimal.fromInt(60)),
            ),
            NumberExpression(Decimal.fromInt(5)),
          ),
          FunctionExpression(
            MathFunction.cos,
            NumberExpression(Decimal.fromInt(45)),
          ),
        ),
      ),
    ],
  ),
  (
    'Engineering calculator operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('2.5'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('10'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('8'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('1.602'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('10'),
          OperatorToken(OperatorTokenType.power),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('19'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.parse('2.5')),
              BinaryExpression(
                BinaryOperator.power,
                NumberExpression(Decimal.fromInt(10)),
                NumberExpression(Decimal.fromInt(8)),
              ),
            ),
            NumberExpression(Decimal.parse('1.602')),
          ),
          BinaryExpression(
            BinaryOperator.power,
            NumberExpression(Decimal.fromInt(10)),
            UnaryExpression(
              UnaryOperator.negate,
              NumberExpression(Decimal.fromInt(19)),
            ),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('4'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.multiply),
          ConstantToken(Constant.pi),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('2.5'),
          FunctionToken(MathFunction.square),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.divide,
              NumberExpression(Decimal.fromInt(4)),
              NumberExpression(Decimal.fromInt(3)),
            ),
            ConstantExpression(Constant.pi),
          ),
          FunctionExpression(
            MathFunction.square,
            NumberExpression(Decimal.parse('2.5')),
          ),
        ),
      ),
    ],
  ),
  (
    'Geometric calculator operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          ConstantToken(Constant.pi),
          OperatorToken(OperatorTokenType.multiply),
          ParenthesisToken.open(),
          NumberToken('10'),
          FunctionToken(MathFunction.square),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('6'),
          FunctionToken(MathFunction.square),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          ConstantExpression(Constant.pi),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.subtract,
              FunctionExpression(
                MathFunction.square,
                NumberExpression(Decimal.fromInt(10)),
              ),
              FunctionExpression(
                MathFunction.square,
                NumberExpression(Decimal.fromInt(6)),
              ),
            ),
            true,
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          ConstantToken(Constant.pi),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('3.5'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('8.2'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.fromInt(2)),
              ConstantExpression(Constant.pi),
            ),
            NumberExpression(Decimal.parse('3.5')),
          ),
          NumberExpression(Decimal.parse('8.2')),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('12'),
          FunctionToken(MathFunction.square),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('5'),
          FunctionToken(MathFunction.square),
          ParenthesisToken.close(),
          FunctionToken(MathFunction.squareRoot),
        ],
        FunctionExpression(
          MathFunction.squareRoot,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              FunctionExpression(
                MathFunction.square,
                NumberExpression(Decimal.fromInt(12)),
              ),
              FunctionExpression(
                MathFunction.square,
                NumberExpression(Decimal.fromInt(5)),
              ),
            ),
            true,
          ),
        ),
      ),
    ],
  ),
  (
    'Trigonometric identity operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('30'),
          FunctionToken(MathFunction.sin),
          FunctionToken(MathFunction.square),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('30'),
          FunctionToken(MathFunction.cos),
          FunctionToken(MathFunction.square),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('1'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          BinaryExpression(
            BinaryOperator.add,
            FunctionExpression(
              MathFunction.square,
              FunctionExpression(
                MathFunction.sin,
                NumberExpression(Decimal.fromInt(30)),
              ),
            ),
            FunctionExpression(
              MathFunction.square,
              FunctionExpression(
                MathFunction.cos,
                NumberExpression(Decimal.fromInt(30)),
              ),
            ),
          ),
          NumberExpression(Decimal.fromInt(1)),
        ),
      ),
      (
        <Token>[
          NumberToken('45'),
          FunctionToken(MathFunction.sin),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('45'),
          FunctionToken(MathFunction.cos),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('45'),
          FunctionToken(MathFunction.tan),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          BinaryExpression(
            BinaryOperator.divide,
            FunctionExpression(
              MathFunction.sin,
              NumberExpression(Decimal.fromInt(45)),
            ),
            FunctionExpression(
              MathFunction.cos,
              NumberExpression(Decimal.fromInt(45)),
            ),
          ),
          FunctionExpression(
            MathFunction.tan,
            NumberExpression(Decimal.fromInt(45)),
          ),
        ),
      ),
    ],
  ),
  (
    'Statistics and probability operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('5'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('5'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              BinaryExpression(
                BinaryOperator.add,
                BinaryExpression(
                  BinaryOperator.add,
                  BinaryExpression(
                    BinaryOperator.add,
                    NumberExpression(Decimal.fromInt(1)),
                    NumberExpression(Decimal.fromInt(2)),
                  ),
                  NumberExpression(Decimal.fromInt(3)),
                ),
                NumberExpression(Decimal.fromInt(4)),
              ),
              NumberExpression(Decimal.fromInt(5)),
            ),
            true,
          ),
          NumberExpression(Decimal.fromInt(5)),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          ParenthesisToken.open(),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('3'),
          ParenthesisToken.close(),
          FunctionToken(MathFunction.square),
          OperatorToken(OperatorTokenType.plus),
          ParenthesisToken.open(),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('3'),
          ParenthesisToken.close(),
          FunctionToken(MathFunction.square),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('2'),
          FunctionToken(MathFunction.squareRoot),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              FunctionExpression(
                MathFunction.square,
                ParenthesisGroupExpression(
                  BinaryExpression(
                    BinaryOperator.subtract,
                    NumberExpression(Decimal.fromInt(2)),
                    NumberExpression(Decimal.fromInt(3)),
                  ),
                  true,
                ),
              ),
              FunctionExpression(
                MathFunction.square,
                ParenthesisGroupExpression(
                  BinaryExpression(
                    BinaryOperator.subtract,
                    NumberExpression(Decimal.fromInt(4)),
                    NumberExpression(Decimal.fromInt(3)),
                  ),
                  true,
                ),
              ),
            ),
            true,
          ),
          FunctionExpression(
            MathFunction.squareRoot,
            NumberExpression(Decimal.fromInt(2)),
          ),
        ),
      ),
    ],
  ),
  (
    'Physics formula operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('0.5'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('25'),
          FunctionToken(MathFunction.square),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            NumberExpression(Decimal.parse('0.5')),
            NumberExpression(Decimal.fromInt(2)),
          ),
          FunctionExpression(
            MathFunction.square,
            NumberExpression(Decimal.fromInt(25)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('6.626'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('10'),
          OperatorToken(OperatorTokenType.power),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('34'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('10'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('8'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.parse('6.626')),
              BinaryExpression(
                BinaryOperator.power,
                NumberExpression(Decimal.fromInt(10)),
                UnaryExpression(
                  UnaryOperator.negate,
                  NumberExpression(Decimal.fromInt(34)),
                ),
              ),
            ),
            NumberExpression(Decimal.fromInt(3)),
          ),
          BinaryExpression(
            BinaryOperator.power,
            NumberExpression(Decimal.fromInt(10)),
            NumberExpression(Decimal.fromInt(8)),
          ),
        ),
      ),
    ],
  ),
  (
    'Mathematical series and sequences',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('8'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('16'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('32'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          BinaryExpression(
            BinaryOperator.add,
            BinaryExpression(
              BinaryOperator.add,
              BinaryExpression(
                BinaryOperator.add,
                BinaryExpression(
                  BinaryOperator.add,
                  NumberExpression(Decimal.fromInt(1)),
                  NumberExpression(Decimal.fromInt(2)),
                ),
                NumberExpression(Decimal.fromInt(4)),
              ),
              NumberExpression(Decimal.fromInt(8)),
            ),
            NumberExpression(Decimal.fromInt(16)),
          ),
          NumberExpression(Decimal.fromInt(32)),
        ),
      ),
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('6'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.multiply,
              BinaryExpression(
                BinaryOperator.multiply,
                BinaryExpression(
                  BinaryOperator.multiply,
                  NumberExpression(Decimal.fromInt(1)),
                  NumberExpression(Decimal.fromInt(2)),
                ),
                NumberExpression(Decimal.fromInt(3)),
              ),
              NumberExpression(Decimal.fromInt(4)),
            ),
            NumberExpression(Decimal.fromInt(5)),
          ),
          NumberExpression(Decimal.fromInt(6)),
        ),
      ),
    ],
  ),
  (
    'Complex fraction operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.divide),
          ParenthesisToken.open(),
          NumberToken('1'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('1'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('3'),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          NumberExpression(Decimal.fromInt(1)),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              BinaryExpression(
                BinaryOperator.divide,
                NumberExpression(Decimal.fromInt(1)),
                NumberExpression(Decimal.fromInt(2)),
              ),
              BinaryExpression(
                BinaryOperator.divide,
                NumberExpression(Decimal.fromInt(1)),
                NumberExpression(Decimal.fromInt(3)),
              ),
            ),
            true,
          ),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('1'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('3'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.multiply),
          ParenthesisToken.open(),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('6'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('7'),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.subtract,
              BinaryExpression(
                BinaryOperator.divide,
                NumberExpression(Decimal.fromInt(3)),
                NumberExpression(Decimal.fromInt(4)),
              ),
              BinaryExpression(
                BinaryOperator.divide,
                NumberExpression(Decimal.fromInt(1)),
                NumberExpression(Decimal.fromInt(3)),
              ),
            ),
            true,
          ),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              BinaryExpression(
                BinaryOperator.divide,
                NumberExpression(Decimal.fromInt(5)),
                NumberExpression(Decimal.fromInt(6)),
              ),
              BinaryExpression(
                BinaryOperator.divide,
                NumberExpression(Decimal.fromInt(2)),
                NumberExpression(Decimal.fromInt(7)),
              ),
            ),
            true,
          ),
        ),
      ),
    ],
  ),
  (
    'Mixed constant and function operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          ConstantToken(Constant.pi),
          OperatorToken(OperatorTokenType.multiply),
          ConstantToken(Constant.euler),
          OperatorToken(OperatorTokenType.power),
          NumberToken('0.5'),
          FunctionToken(MathFunction.sin),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            NumberExpression(Decimal.fromInt(2)),
            ConstantExpression(Constant.pi),
          ),
          BinaryExpression(
            BinaryOperator.power,
            ConstantExpression(Constant.euler),
            FunctionExpression(
              MathFunction.sin,
              NumberExpression(Decimal.parse('0.5')),
            ),
          ),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          ConstantToken(Constant.pi),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('2'),
          ParenthesisToken.close(),
          FunctionToken(MathFunction.cos),
          OperatorToken(OperatorTokenType.plus),
          ParenthesisToken.open(),
          ConstantToken(Constant.pi),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('4'),
          ParenthesisToken.close(),
          FunctionToken(MathFunction.sin),
        ],
        BinaryExpression(
          BinaryOperator.add,
          FunctionExpression(
            MathFunction.cos,
            ParenthesisGroupExpression(
              BinaryExpression(
                BinaryOperator.divide,
                ConstantExpression(Constant.pi),
                NumberExpression(Decimal.fromInt(2)),
              ),
              true,
            ),
          ),
          FunctionExpression(
            MathFunction.sin,
            ParenthesisGroupExpression(
              BinaryExpression(
                BinaryOperator.divide,
                ConstantExpression(Constant.pi),
                NumberExpression(Decimal.fromInt(4)),
              ),
              true,
            ),
          ),
        ),
      ),
    ],
  ),
  (
    'Large number operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('1000000'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('2000000'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('500'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          BinaryExpression(
            BinaryOperator.multiply,
            NumberExpression(Decimal.fromInt(1000000)),
            NumberExpression(Decimal.fromInt(2000000)),
          ),
          NumberExpression(Decimal.fromInt(500)),
        ),
      ),
      (
        <Token>[
          NumberToken('999999999'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('1'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('1000000000'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          BinaryExpression(
            BinaryOperator.add,
            NumberExpression(Decimal.fromInt(999999999)),
            NumberExpression(Decimal.fromInt(1)),
          ),
          NumberExpression(Decimal.fromInt(1000000000)),
        ),
      ),
    ],
  ),
  (
    'Very small decimal operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('0.000001'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('1000000'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.parse('0.000001')),
          NumberExpression(Decimal.fromInt(1000000)),
        ),
      ),
      (
        <Token>[
          NumberToken('0.123456789'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('0.987654321'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('3.14159'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.parse('0.123456789')),
          BinaryExpression(
            BinaryOperator.multiply,
            NumberExpression(Decimal.parse('0.987654321')),
            NumberExpression(Decimal.parse('3.14159')),
          ),
        ),
      ),
    ],
  ),
  (
    'Advanced arithmetic operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('1000000'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('1'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.fromInt(1000000)),
          NumberExpression(Decimal.fromInt(1)),
        ),
      ),
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.divide,
            NumberExpression(Decimal.fromInt(1)),
            NumberExpression(Decimal.fromInt(3)),
          ),
          NumberExpression(Decimal.fromInt(3)),
        ),
      ),
      (
        <Token>[
          NumberToken('0'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('5'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          NumberExpression(Decimal.fromInt(0)),
          NumberExpression(Decimal.fromInt(5)),
        ),
      ),
      (
        <Token>[
          NumberToken('7'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('0'),
        ],
        BinaryExpression(
          BinaryOperator.power,
          NumberExpression(Decimal.fromInt(7)),
          NumberExpression(Decimal.fromInt(0)),
        ),
      ),
      (
        <Token>[
          NumberToken('0'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('5'),
        ],
        BinaryExpression(
          BinaryOperator.power,
          NumberExpression(Decimal.fromInt(0)),
          NumberExpression(Decimal.fromInt(5)),
        ),
      ),
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('100'),
        ],
        BinaryExpression(
          BinaryOperator.power,
          NumberExpression(Decimal.fromInt(1)),
          NumberExpression(Decimal.fromInt(100)),
        ),
      ),
    ],
  ),
  (
    'Negative number operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          OperatorToken(OperatorTokenType.minus),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.plus),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          UnaryExpression(
            UnaryOperator.negate,
            NumberExpression(Decimal.fromInt(5)),
          ),
          UnaryExpression(
            UnaryOperator.negate,
            NumberExpression(Decimal.fromInt(3)),
          ),
        ),
      ),
      (
        <Token>[
          OperatorToken(OperatorTokenType.minus),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.power,
          UnaryExpression(
            UnaryOperator.negate,
            NumberExpression(Decimal.fromInt(2)),
          ),
          NumberExpression(Decimal.fromInt(3)),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('2'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.power),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.power,
          ParenthesisGroupExpression(
            UnaryExpression(
              UnaryOperator.negate,
              NumberExpression(Decimal.fromInt(2)),
            ),
            true,
          ),
          NumberExpression(Decimal.fromInt(3)),
        ),
      ),
    ],
  ),
  (
    'Chain operations',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('5'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          BinaryExpression(
            BinaryOperator.add,
            BinaryExpression(
              BinaryOperator.add,
              BinaryExpression(
                BinaryOperator.add,
                NumberExpression(Decimal.fromInt(1)),
                NumberExpression(Decimal.fromInt(2)),
              ),
              NumberExpression(Decimal.fromInt(3)),
            ),
            NumberExpression(Decimal.fromInt(4)),
          ),
          NumberExpression(Decimal.fromInt(5)),
        ),
      ),
      (
        <Token>[
          NumberToken('100'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          BinaryExpression(
            BinaryOperator.divide,
            BinaryExpression(
              BinaryOperator.divide,
              NumberExpression(Decimal.fromInt(100)),
              NumberExpression(Decimal.fromInt(5)),
            ),
            NumberExpression(Decimal.fromInt(4)),
          ),
          NumberExpression(Decimal.fromInt(2)),
        ),
      ),
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('4'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('5'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.fromInt(2)),
              NumberExpression(Decimal.fromInt(3)),
            ),
            NumberExpression(Decimal.fromInt(4)),
          ),
          NumberExpression(Decimal.fromInt(5)),
        ),
      ),
    ],
  ),
  (
    'Function chaining',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('64'),
          FunctionToken(MathFunction.squareRoot),
          FunctionToken(MathFunction.squareRoot),
          FunctionToken(MathFunction.square),
        ],
        FunctionExpression(
          MathFunction.square,
          FunctionExpression(
            MathFunction.squareRoot,
            FunctionExpression(
              MathFunction.squareRoot,
              NumberExpression(Decimal.fromInt(64)),
            ),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('100'),
          FunctionToken(MathFunction.percent),
          FunctionToken(MathFunction.square),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('50'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          FunctionExpression(
            MathFunction.square,
            FunctionExpression(
              MathFunction.percent,
              NumberExpression(Decimal.fromInt(100)),
            ),
          ),
          NumberExpression(Decimal.fromInt(50)),
        ),
      ),
    ],
  ),
  (
    'Business calculation patterns',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('1200'),
          OperatorToken(OperatorTokenType.multiply),
          ParenthesisToken.open(),
          NumberToken('1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('8.5'),
          FunctionToken(MathFunction.percent),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(1200)),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              NumberExpression(Decimal.fromInt(1)),
              FunctionExpression(
                MathFunction.percent,
                NumberExpression(Decimal.parse('8.5')),
              ),
            ),
            true,
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('50000'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('45000'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('45000'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('100'),
          FunctionToken(MathFunction.percent),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          NumberExpression(Decimal.fromInt(50000)),
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.divide,
              NumberExpression(Decimal.fromInt(45000)),
              NumberExpression(Decimal.fromInt(45000)),
            ),
            FunctionExpression(
              MathFunction.percent,
              NumberExpression(Decimal.fromInt(100)),
            ),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('10000'),
          OperatorToken(OperatorTokenType.divide),
          ParenthesisToken.open(),
          NumberToken('1'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('20'),
          FunctionToken(MathFunction.percent),
          ParenthesisToken.close(),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          NumberExpression(Decimal.fromInt(10000)),
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.subtract,
              NumberExpression(Decimal.fromInt(1)),
              FunctionExpression(
                MathFunction.percent,
                NumberExpression(Decimal.fromInt(20)),
              ),
            ),
            true,
          ),
        ),
      ),
    ],
  ),
  (
    'Unit conversion patterns',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('100'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('2.54'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(100)),
          NumberExpression(Decimal.parse('2.54')),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('68'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('32'),
          ParenthesisToken.close(),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('9'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          BinaryExpression(
            BinaryOperator.multiply,
            ParenthesisGroupExpression(
              BinaryExpression(
                BinaryOperator.subtract,
                NumberExpression(Decimal.fromInt(68)),
                NumberExpression(Decimal.fromInt(32)),
              ),
              true,
            ),
            NumberExpression(Decimal.fromInt(5)),
          ),
          NumberExpression(Decimal.fromInt(9)),
        ),
      ),
      (
        <Token>[
          NumberToken('60'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('60'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('24'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('365'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.fromInt(60)),
              NumberExpression(Decimal.fromInt(60)),
            ),
            NumberExpression(Decimal.fromInt(24)),
          ),
          NumberExpression(Decimal.fromInt(365)),
        ),
      ),
    ],
  ),
  (
    'Mathematical sequences',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('3'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('8'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          BinaryExpression(
            BinaryOperator.add,
            BinaryExpression(
              BinaryOperator.add,
              BinaryExpression(
                BinaryOperator.add,
                BinaryExpression(
                  BinaryOperator.add,
                  NumberExpression(Decimal.fromInt(1)),
                  NumberExpression(Decimal.fromInt(1)),
                ),
                NumberExpression(Decimal.fromInt(2)),
              ),
              NumberExpression(Decimal.fromInt(3)),
            ),
            NumberExpression(Decimal.fromInt(5)),
          ),
          NumberExpression(Decimal.fromInt(8)),
        ),
      ),
      (
        <Token>[
          NumberToken('2'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          BinaryExpression(
            BinaryOperator.add,
            BinaryExpression(
              BinaryOperator.power,
              NumberExpression(Decimal.fromInt(2)),
              NumberExpression(Decimal.fromInt(1)),
            ),
            BinaryExpression(
              BinaryOperator.power,
              NumberExpression(Decimal.fromInt(2)),
              NumberExpression(Decimal.fromInt(2)),
            ),
          ),
          BinaryExpression(
            BinaryOperator.power,
            NumberExpression(Decimal.fromInt(2)),
            NumberExpression(Decimal.fromInt(3)),
          ),
        ),
      ),
    ],
  ),
  (
    'Physics formulas',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('0.5'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('70'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('25'),
          FunctionToken(MathFunction.square),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.multiply,
            NumberExpression(Decimal.parse('0.5')),
            NumberExpression(Decimal.fromInt(70)),
          ),
          FunctionExpression(
            MathFunction.square,
            NumberExpression(Decimal.fromInt(25)),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('9.8'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('5'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('10'),
          FunctionToken(MathFunction.square),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('2'),
        ],
        BinaryExpression(
          BinaryOperator.divide,
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.multiply,
              NumberExpression(Decimal.parse('9.8')),
              NumberExpression(Decimal.fromInt(5)),
            ),
            FunctionExpression(
              MathFunction.square,
              NumberExpression(Decimal.fromInt(10)),
            ),
          ),
          NumberExpression(Decimal.fromInt(2)),
        ),
      ),
      (
        <Token>[
          ParenthesisToken.open(),
          NumberToken('3'),
          FunctionToken(MathFunction.square),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('4'),
          FunctionToken(MathFunction.square),
          ParenthesisToken.close(),
          FunctionToken(MathFunction.squareRoot),
        ],
        FunctionExpression(
          MathFunction.squareRoot,
          ParenthesisGroupExpression(
            BinaryExpression(
              BinaryOperator.add,
              FunctionExpression(
                MathFunction.square,
                NumberExpression(Decimal.fromInt(3)),
              ),
              FunctionExpression(
                MathFunction.square,
                NumberExpression(Decimal.fromInt(4)),
              ),
            ),
            true,
          ),
        ),
      ),
    ],
  ),
  (
    'Extreme precision tests',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('0.123456789012345'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('9.876543210987654'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.parse('0.123456789012345')),
          NumberExpression(Decimal.parse('9.876543210987654')),
        ),
      ),
      (
        <Token>[
          NumberToken('999999999.999999999'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('0.000000001'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.parse('999999999.999999999')),
          NumberExpression(Decimal.parse('0.000000001')),
        ),
      ),
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.divide),
          NumberToken('7'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('7'),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('1'),
        ],
        BinaryExpression(
          BinaryOperator.subtract,
          BinaryExpression(
            BinaryOperator.multiply,
            BinaryExpression(
              BinaryOperator.divide,
              NumberExpression(Decimal.fromInt(1)),
              NumberExpression(Decimal.fromInt(7)),
            ),
            NumberExpression(Decimal.fromInt(7)),
          ),
          NumberExpression(Decimal.fromInt(1)),
        ),
      ),
    ],
  ),
  (
    'Error-prone scenarios',
    <(List<Token>, Expression)>[
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.plus),
          NumberToken('2'),
          OperatorToken(OperatorTokenType.multiply),
          OperatorToken(OperatorTokenType.minus),
          NumberToken('3'),
        ],
        BinaryExpression(
          BinaryOperator.add,
          NumberExpression(Decimal.fromInt(1)),
          BinaryExpression(
            BinaryOperator.multiply,
            NumberExpression(Decimal.fromInt(2)),
            UnaryExpression(
              UnaryOperator.negate,
              NumberExpression(Decimal.fromInt(3)),
            ),
          ),
        ),
      ),
      (
        <Token>[
          NumberToken('0'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('999999'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          NumberExpression(Decimal.fromInt(0)),
          NumberExpression(Decimal.fromInt(999999)),
        ),
      ),
      (
        <Token>[
          NumberToken('1'),
          OperatorToken(OperatorTokenType.power),
          NumberToken('0'),
          OperatorToken(OperatorTokenType.multiply),
          NumberToken('100'),
        ],
        BinaryExpression(
          BinaryOperator.multiply,
          BinaryExpression(
            BinaryOperator.power,
            NumberExpression(Decimal.fromInt(1)),
            NumberExpression(Decimal.fromInt(0)),
          ),
          NumberExpression(Decimal.fromInt(100)),
        ),
      ),
    ],
  ),
];
