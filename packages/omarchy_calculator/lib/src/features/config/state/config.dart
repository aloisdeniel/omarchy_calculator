import 'package:calc_engine/calc_engine.dart';
import 'package:flutter_omarchy/flutter_omarchy.dart';
import 'package:omarchy_calculator/src/features/config/state/base_mappers.dart';
import 'package:yaml/yaml.dart';
import 'package:dart_mappable/dart_mappable.dart';

// Will be generated by dart_mappable
part 'config.mapper.dart';

const packageId = 'calculator';

@MappableClass(includeCustomMappers: [MathFunctionMapper(), ConstantMapper()])
class Config with ConfigMappable {
  const Config({
    this.constants = const [],
    this.functions = const [],
    required this.layouts,
  });

  final List<Constant> constants;
  final List<MathFunction> functions;
  final List<ButtonLayout> layouts;

  factory Config.defaults() =>
      const Config(layouts: [ButtonLayout.base(), ButtonLayout.scientific()]);

  factory Config.fromYaml(String yaml) {
    final map = loadYaml(yaml);
    if (map is Map<String, dynamic>) {
      return ConfigMapper.fromMap(map);
    } else {
      throw ArgumentError.value(yaml, 'yaml', 'Invalid YAML format');
    }
  }
}

@MappableClass()
class ButtonLayout with ButtonLayoutMappable {
  const ButtonLayout({required this.name, required this.buttons});

  const ButtonLayout.base()
    : name = 'Base',
      buttons = const [
        // Row 1
        Button(label: 'CA', command: Command.clearAll(), color: AnsiColor.red),
        Button(
          label: '(',
          command: Command.openParenthesis(),
          color: AnsiColor.blue,
        ),
        Button(
          label: ')',
          command: Command.closeParenthesis(),
          color: AnsiColor.blue,
        ),
        Button(
          label: '÷',
          command: Command.operator(OperatorType.divide),
          color: AnsiColor.yellow,
        ),
        // Row 2
        Button(label: '7', command: Command.digit(7)),
        Button(label: '8', command: Command.digit(8)),
        Button(label: '9', command: Command.digit(9)),
        Button(
          label: '×',
          command: Command.operator(OperatorType.multiply),
          color: AnsiColor.yellow,
        ),
        // Row 3
        Button(label: '4', command: Command.digit(4)),
        Button(label: '5', command: Command.digit(5)),
        Button(label: '6', command: Command.digit(6)),
        Button(
          label: '-',
          command: Command.operator(OperatorType.minus),
          color: AnsiColor.yellow,
        ),
        // Row 4
        Button(label: '1', command: Command.digit(1)),
        Button(label: '2', command: Command.digit(2)),
        Button(label: '3', command: Command.digit(3)),
        Button(
          label: '+',
          command: Command.operator(OperatorType.plus),
          color: AnsiColor.yellow,
        ),
        // Row 5
        Button(
          label: '±',
          command: Command.function('negate'),
          color: AnsiColor.blue,
        ),
        Button(label: '0', command: Command.digit(0)),
        Button(label: '.', command: Command.decimalPoint()),
        Button(label: '=', command: Command.equals(), color: AnsiColor.green),
      ];

  const ButtonLayout.scientific()
    : name = 'Scientific',
      buttons = const [
        // Row 1
        Button(
          label: 'π',
          command: Command.constant('pi'),
          color: AnsiColor.cyan,
        ),
        Button(
          label: 'sin',
          command: Command.function('sin'),
          color: AnsiColor.cyan,
        ),
        Button(
          label: 'cos',
          command: Command.function('cos'),
          color: AnsiColor.cyan,
        ),
        Button(
          label: 'tan',
          command: Command.function('tan'),
          color: AnsiColor.cyan,
        ),
        // Row 2
        Button(
          label: 'x²',
          command: Command.function('square'),
          color: AnsiColor.blue,
        ),
        Button(
          label: 'x³',
          command: Command.function('cube'),
          color: AnsiColor.blue,
        ),
        Button(label: 'xʸ', command: Command.power(), color: AnsiColor.blue),
        Button(
          label: 'eˣ',
          command: Command.function('expPower'),
          color: AnsiColor.blue,
        ),
        // Row 3
        Button(
          label: 'x²',
          command: Command.function('square'),
          color: AnsiColor.blue,
        ),
        Button(
          label: '√',
          command: Command.function('sqrt'),
          color: AnsiColor.blue,
        ),
        Button(
          label: 'ⁿ√',
          command: Command.function('nthRoot'),
          color: AnsiColor.blue,
        ),
        Button(
          label: '1/x',
          command: Command.function('reciprocal'),
          color: AnsiColor.blue,
        ),
        // Row 4
        Button(
          label: 'log',
          command: Command.function('log'),
          color: AnsiColor.magenta,
        ),
        Button(
          label: 'ln',
          command: Command.function('ln'),
          color: AnsiColor.magenta,
        ),
        Button(
          label: 'exp',
          command: Command.function('exp'),
          color: AnsiColor.magenta,
        ),
        Button(
          label: 'abs',
          command: Command.function('abs'),
          color: AnsiColor.magenta,
        ),
        // Row 4
        Button(
          label: 'e',
          command: Command.constant('e'),
          color: AnsiColor.magenta,
        ),
        Button(
          label: 'mod',
          command: Command.function('modulo'),
          color: AnsiColor.magenta,
        ),
        Button(
          label: 'x!',
          command: Command.function('factorial'),
          color: AnsiColor.magenta,
        ),
        Button(
          label: '%',
          command: Command.function('percent'),
          color: AnsiColor.magenta,
        ),
      ];

  factory ButtonLayout.fromName(
    String name, {
    ButtonLayout Function()? orElse,
  }) {
    return switch (name.toLowerCase()) {
      'base' => const ButtonLayout.base(),
      'scientific' => const ButtonLayout.scientific(),
      _ =>
        orElse?.call() ??
            (throw ArgumentError.value(name, 'name', 'Unknown layout name')),
    };
  }

  final String name;
  final List<Button> buttons;
}

@MappableClass(
  includeCustomMappers: [
    AnsiColorMapper(),
    OmarchyIconMapper(),
    CommandMapper(),
  ],
)
class Button with ButtonMappable {
  const Button({
    required this.label,
    required this.command,
    this.color = AnsiColor.white,
    this.size = 1,
    this.icon,
  });

  final String label;
  final IconData? icon;
  final Command command;
  final AnsiColor color;
  final int size;
}
